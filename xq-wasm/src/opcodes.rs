use core::num;




#[repr(u8)]
#[derive(Debug, num_enum::TryFromPrimitive, num_enum::IntoPrimitive)]
pub enum OpCode {
    // Control instructions
    Unreachable = 0x00u8,
    Nop = 0x01u8,
    Block = 0x02u8,
    Loop = 0x03u8,
    If = 0x04u8,
    Else = 0x05u8,
    End = 0x0Bu8,
    Br = 0x0Cu8,
    BrIf = 0x0Du8,
    BrTable = 0x0Eu8,
    Return = 0x0Fu8,
    Call = 0x10u8,
    CallIndirect = 0x11u8,

    // Parametric instructions
    Drop = 0x1Au8,
    Select = 0x1Bu8,

    // Variable instructions
    LocalGet = 0x20u8,
    LocalSet = 0x21u8,
    LocalTee = 0x22u8,
    GlobalGet = 0x23u8,
    GlobalSet = 0x24u8,

    // Memory instructions
    I32Load = 0x28u8,
    I64Load = 0x29u8,
    F32Load = 0x2Au8,
    F64Load = 0x2Bu8,
    I32Load8S = 0x2Cu8,
    I32Load8U = 0x2Du8,
    I32Load16S = 0x2Eu8,
    I32Load16U = 0x2Fu8,
    I64Load8S = 0x30u8,
    I64Load8U = 0x31u8,
    I64Load16S = 0x32u8,
    I64Load16U = 0x33u8,
    I64Load32S = 0x34u8,
    I64Load32U = 0x35u8,
    I32Store = 0x36u8,
    I64Store = 0x37u8,
    F32Store = 0x38u8,
    F64Store = 0x39u8,
    I32Store8 = 0x3Au8,
    I32Store16 = 0x3Bu8,
    I64Store8 = 0x3Cu8,
    I64Store16 = 0x3Du8,
    I64Store32 = 0x3Eu8,
    MemorySize = 0x3Fu8,
    MemoryGrow = 0x40u8,

    // Numeric instructions
    I32Const = 0x41u8,
    I64Const = 0x42u8,
    F32Const = 0x43u8,
    F64Const = 0x44u8,

    I32Eqz = 0x45u8,
    I32Eq = 0x46u8,
    I32Ne = 0x47u8,
    I32LtS = 0x48u8,
    I32LtU = 0x49u8,
    I32GtS = 0x4Au8,
    I32GtU = 0x4Bu8,
    I32LeS = 0x4Cu8,
    I32LeU = 0x4Du8,
    I32GeS = 0x4Eu8,
    I32GeU = 0x4Fu8,
    I64Eqz = 0x50u8,
    I64Eq = 0x51u8,
    I64Ne = 0x52u8,
    I64LtS = 0x53u8,
    I64LtU = 0x54u8,
    I64GtS = 0x55u8,
    I64GtU = 0x56u8,
    I64LeS = 0x57u8,
    I64LeU = 0x58u8,
    I64GeS = 0x59u8,
    I64GeU = 0x5Au8,
    F32Eq = 0x5Bu8,
    F32Ne = 0x5Cu8,
    F32Lt = 0x5Du8,
    F32Gt = 0x5Eu8,
    F32Le = 0x5Fu8,
    F32Ge = 0x60u8,
    F64Eq = 0x61u8,
    F64Ne = 0x62u8,
    F64Lt = 0x63u8,
    F64Gt = 0x64u8,
    F64Le = 0x65u8,
    F64Ge = 0x66u8,

    I32Clz = 0x67u8,
    I32Ctz = 0x68u8,
    I32Popcnt = 0x69u8,
    I32Add = 0x6Au8,
    I32Sub = 0x6Bu8,
    I32Mul = 0x6Cu8,
    I32DivS = 0x6Du8,
    I32DivU = 0x6Eu8,
    I32RemS = 0x6Fu8,
    I32RemU = 0x70u8,
    I32And = 0x71u8,
    I32Or = 0x72u8,
    I32Xor = 0x73u8,
    I32Shl = 0x74u8,
    I32ShrS = 0x75u8,
    I32ShrU = 0x76u8,
    I32Rotl = 0x77u8,
    I32Rotr = 0x78u8,
    I64Clz = 0x79u8,
    I64Ctz = 0x7Au8,
    I64Popcnt = 0x7Bu8,
    I64Add = 0x7Cu8,
    I64Sub = 0x7Du8,
    I64Mul = 0x7Eu8,
    I64DivS = 0x7Fu8,
    I64DivU = 0x80u8,
    I64RemS = 0x81u8,
    I64RemU = 0x82u8,
    I64And = 0x83u8,
    I64Or = 0x84u8,
    I64Xor = 0x85u8,
    I64Shl = 0x86u8,
    I64ShrS = 0x87u8,
    I64ShrU = 0x88u8,
    I64Rotl = 0x89u8,
    I64Rotr = 0x8Au8,
    F32Abs = 0x8Bu8,
    F32Neg = 0x8Cu8,
    F32Ceil = 0x8Du8,
    F32Floor = 0x8Eu8,
    F32Trunc = 0x8Fu8,
    F32Nearest = 0x90u8,
    F32Sqrt = 0x91u8,
    F32Add = 0x92u8,
    F32Sub = 0x93u8,
    F32Mul = 0x94u8,
    F32Div = 0x95u8,
    F32Min = 0x96u8,
    F32Max = 0x97u8,
    F32CopySign = 0x98u8,
    F64Abs = 0x99u8,
    F64Neg = 0x9Au8,
    F64Ceil = 0x9Bu8,
    F64Floor = 0x9Cu8,
    F64Trunc = 0x9Du8,
    F64Nearest = 0x9Eu8,
    F64Sqrt = 0x9Fu8,
    F64Add = 0xA0u8,
    F64Sub = 0xA1u8,
    F64Mul = 0xA2u8,
    F64Div = 0xA3u8,
    F64Min = 0xA4u8, 
    F64Max = 0xA5u8,
    F64CopySign = 0xA6u8,

    I32WrapI64 = 0xA7u8,
    I32TruncF32S = 0xA8u8,
    I32TruncF32U = 0xA9u8,
    I32TruncF64S = 0xAAu8,
    I32TruncF64U = 0xABu8,
    I64ExtendI32S = 0xACu8,
    I64ExtendI32U = 0xADu8,
    I64TruncF32S = 0xAEu8,
    I64TruncF32U = 0xAFu8,
    I64TruncF64S = 0xB0u8,
    I64TruncF64U = 0xB1u8,
    F32ConvertI32S = 0xB2u8,
    F32ConvertI32U = 0xB3u8,
    F32ConvertI64S = 0xB4u8,
    F32ConvertI64U = 0xB5u8,
    F32DemoteF64 = 0xB6u8,
    F64ConvertI32S = 0xB7u8,
    F64ConvertI32U = 0xB8u8,
    F64ConvertI64S = 0xB9u8,
    F64ConvertI64U = 0xBAu8,
    F64PromoteF32 = 0xBBu8,
    I32ReinterpretF32 = 0xBCu8,
    I64ReinterpretF64 = 0xBDu8,
    F32ReinterpretI32 = 0xBEu8,
    F64ReinterpretI64 = 0xBFu8,
    I32Extend8S = 0xC0u8,
    I32Extend16S = 0xC1u8,
    I64Extend8S = 0xC2u8,
    I64Extend16S = 0xC3u8,
    I64Extend32S = 0xC4u8,
    TruncSat = 0xFCu8,
}


// #[repr(u8)]
// #[derive(Debug)]
// pub enum OpCode {
//     // Control instructions
//     Unreachable = 0x00,
//     Nop = 0x01,
//     Block = 0x02,
//     Loop = 0x03,
//     If = 0x04,
//     Else = 0x05,
//     End = 0x0B,
//     Br = 0x0C,
//     BrIf = 0x0D,
//     BrTable = 0x0E,
//     Return = 0x0F,
//     Call = 0x10,
//     CallIndirect = 0x11,

//     // Parametric instructions
//     Drop = 0x1A,
//     Select = 0x1B,

//     // Variable instructions
//     LocalGet = 0x20,
//     LocalSet = 0x21,
//     LocalTee = 0x22,
//     GlobalGet = 0x23,
//     GlobalSet = 0x24,

//     // Memory instructions
//     I32Load = 0x28,
//     I64Load = 0x29,
//     F32Load = 0x2A,
//     F64Load = 0x2B,
//     I32Load8S = 0x2C,
//     I32Load8U = 0x2D,
//     I32Load16S = 0x2E,
//     I32Load16U = 0x2F,
//     I64Load8S = 0x30,
//     I64Load8U = 0x31,
//     I64Load16S = 0x32,
//     I64Load16U = 0x33,
//     I64Load32S = 0x34,
//     I64Load32U = 0x35,
//     I32Store = 0x36,
//     I64Store = 0x37,
//     F32Store = 0x38,
//     F64Store = 0x39,
//     I32Store8 = 0x3A,
//     I32Store16 = 0x3B,
//     I64Store8 = 0x3C,
//     I64Store16 = 0x3D,
//     I64Store32 = 0x3E,
//     MemorySize = 0x3F,
//     MemoryGrow = 0x40,

//     // Numeric instructions
//     I32Const = 0x41,
//     I64Const = 0x42,
//     F32Const = 0x43,
//     F64Const = 0x44,

//     I32Eqz = 0x45,
//     I32Eq = 0x46,
//     I32Ne = 0x47,
//     I32LtS = 0x48,
//     I32LtU = 0x49,
//     I32GtS = 0x4A,
//     I32GtU = 0x4B,
//     I32LeS = 0x4C,
//     I32LeU = 0x4D,
//     I32GeS = 0x4E,
//     I32GeU = 0x4F,
//     I64Eqz = 0x50,
//     I64Eq = 0x51,
//     I64Ne = 0x52,
//     I64LtS = 0x53,
//     I64LtU = 0x54,
//     I64GtS = 0x55,
//     I64GtU = 0x56,
//     I64LeS = 0x57,
//     I64LeU = 0x58,
//     I64GeS = 0x59,
//     I64GeU = 0x5A,
//     F32Eq = 0x5B,
//     F32Ne = 0x5C,
//     F32Lt = 0x5D,
//     F32Gt = 0x5E,
//     F32Le = 0x5F,
//     F32Ge = 0x60,
//     F64Eq = 0x61,
//     F64Ne = 0x62,
//     F64Lt = 0x63,
//     F64Gt = 0x64,
//     F64Le = 0x65,
//     F64Ge = 0x66,

//     I32Clz = 0x67,
//     I32Ctz = 0x68,
//     I32Popcnt = 0x69,
//     I32Add = 0x6A,
//     I32Sub = 0x6B,
//     I32Mul = 0x6C,
//     I32DivS = 0x6D,
//     I32DivU = 0x6E,
//     I32RemS = 0x6F,
//     I32RemU = 0x70,
//     I32And = 0x71,
//     I32Or = 0x72,
//     I32Xor = 0x73,
//     I32Shl = 0x74,
//     I32ShrS = 0x75,
//     I32ShrU = 0x76,
//     I32Rotl = 0x77,
//     I32Rotr = 0x78,
//     I64Clz = 0x79,
//     I64Ctz = 0x7A,
//     I64Popcnt = 0x7B,
//     I64Add = 0x7C,
//     I64Sub = 0x7D,
//     I64Mul = 0x7E,
//     I64DivS = 0x7F,
//     I64DivU = 0x80,
//     I64RemS = 0x81,
//     I64RemU = 0x82,
//     I64And = 0x83,
//     I64Or = 0x84,
//     I64Xor = 0x85,
//     I64Shl = 0x86,
//     I64ShrS = 0x87,
//     I64ShrU = 0x88,
//     I64Rotl = 0x89,
//     I64Rotr = 0x8A,
//     F32Abs = 0x8B,
//     F32Neg = 0x8C,
//     F32Ceil = 0x8D,
//     F32Floor = 0x8E,
//     F32Trunc = 0x8F,
//     F32Nearest = 0x90,
//     F32Sqrt = 0x91,
//     F32Add = 0x92,
//     F32Sub = 0x93,
//     F32Mul = 0x94,
//     F32Div = 0x95,
//     F32Min = 0x96,
//     F32Max = 0x97,
//     F32CopySign = 0x98,
//     F64Abs = 0x99,
//     F64Neg = 0x9A,
//     F64Ceil = 0x9B,
//     F64Floor = 0x9C,
//     F64Trunc = 0x9D,
//     F64Nearest = 0x9E,
//     F64Sqrt = 0x9F,
//     F64Add = 0xA0,
//     F64Sub = 0xA1,
//     F64Mul = 0xA2,
//     F64Div = 0xA3,
//     F64Min = 0xA4,
//     F64Max = 0xA5,
//     F64CopySign = 0xA6,

//     I32WrapI64 = 0xA7,
//     I32TruncF32S = 0xA8,
//     I32TruncF32U = 0xA9,
//     I32TruncF64S = 0xAA,
//     I32TruncF64U = 0xAB,
//     I64ExtendI32S = 0xAC,
//     I64ExtendI32U = 0xAD,
//     I64TruncF32S = 0xAE,
//     I64TruncF32U = 0xAF,
//     I64TruncF64S = 0xB0,
//     I64TruncF64U = 0xB1,
//     F32ConvertI32S = 0xB2,
//     F32ConvertI32U = 0xB3,
//     F32ConvertI64S = 0xB4,
//     F32ConvertI64U = 0xB5,
//     F32DemoteF64 = 0xB6,
//     F64ConvertI32S = 0xB7,
//     F64ConvertI32U = 0xB8,
//     F64ConvertI64S = 0xB9,
//     F64ConvertI64U = 0xBA,
//     F64PromoteF32 = 0xBB,
//     I32ReinterpretF32 = 0xBC,
//     I64ReinterpretF64 = 0xBD,
//     F32ReinterpretI32 = 0xBE,
//     F64ReinterpretI64 = 0xBF,
//     I32Extend8S = 0xC0,
//     I32Extend16S = 0xC1,
//     I64Extend8S = 0xC2,
//     I64Extend16S = 0xC3,
//     I64Extend32S = 0xC4,
//     TruncSat = 0xFC,
// }
